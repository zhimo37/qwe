<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhimo37.github.io\</id>
    <title>Gridea</title>
    <updated>2023-06-23T10:14:55.254Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhimo37.github.io\"/>
    <link rel="self" href="https://zhimo37.github.io\/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zhimo37.github.io\/images/avatar.png</logo>
    <icon>https://zhimo37.github.io\/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[算法部分]]></title>
        <id>https://zhimo37.github.io\/post/suan-fa-bu-fen/</id>
        <link href="https://zhimo37.github.io\/post/suan-fa-bu-fen/">
        </link>
        <updated>2023-06-23T09:17:20.000Z</updated>
        <content type="html"><![CDATA[<p>import java.util.Stack;</p>
<p>public class ExpressionEvaluation {</p>
<pre><code>private int precedence(char operator) {
    if (operator == '+' || operator == '-') {
        return 1;
    } else if (operator == '*' || operator == '/') {
        return 2;
    } else if (operator == '^') {
        return 3;
    } else {
        return -1;
    }
}

public  double applyOp(char operator, double a, double b) {
    switch(operator) {
        case '+':
            return a + b;
        case '-':
            return a - b;
        case '*':
            return a * b;
        case '/':
            if (b == 0)
                throw new UnsupportedOperationException(&quot;Cannot divide by zero&quot;);
            return a / b;
        case '^':
            return Math.pow(a, b);
    }
    return 0;
}

public double evaluate(String expression) {
    char[] tokens = expression.toCharArray();

    Stack&lt;Double&gt; values = new Stack&lt;&gt;();
    Stack&lt;Character&gt; operators = new Stack&lt;&gt;();

    for (int i = 0; i &lt; tokens.length; i++) {
        if (tokens[i] == ' ') {
            continue;
        } else if (tokens[i] &gt;= '0' &amp;&amp; tokens[i] &lt;= '9') {
            StringBuilder sb = new StringBuilder();
            while (i &lt; tokens.length &amp;&amp; (tokens[i] &gt;= '0' &amp;&amp; tokens[i] &lt;= '9' || tokens[i] == '.')) {
                sb.append(tokens[i++]);
            }
            values.push(Double.parseDouble(sb.toString()));
            i--;
        } else if (tokens[i] == '(') {
            operators.push(tokens[i]);
        } else if (tokens[i] == ')') {
            while (operators.peek() != '(') {
                double val2 = values.pop();
                double val1 = values.pop();
                char op = operators.pop();

                values.push(applyOp(op, val1, val2));
            }
            operators.pop();
        } else if (tokens[i] == '+' || tokens[i] == '-' || tokens[i] == '*' || tokens[i] == '/' || tokens[i] == '^') {
            while (!operators.empty() &amp;&amp; precedence(tokens[i]) &lt;= precedence(operators.peek())) {
                double val2 = values.pop();
                double val1 = values.pop();
                char op = operators.pop();
                values.push(applyOp(op, val1, val2));
            }
            operators.push(tokens[i]);
        }
    }

    while (!operators.empty()) {
        double val2 = values.pop();
        double val1 = values.pop();
        char op = operators.pop();

        values.push(applyOp(op, val1, val2));
    }

    return values.pop();
}











String search(String s,String p) {
    int k=1;
    String res = &quot;\n&quot;;
    String s1=&quot;0&quot;;
    String p1=&quot;0&quot;;
    s1+=s;  //s1表示被对比的母串
    p1+=p;  //p1表示用来对比的子串e[i]的长度的字符串相等



    // System.out.println(&quot;请输入需要查找的字串长度和字串:&quot;);


    int[] ne  = new int[100010]; //表示以i为终点，前ne[i]和后n
    //  System.out.println(&quot;请输入被查找的模板字符串长度和字串:&quot;);

    // System.out.println(&quot;注：本程序的字符串下标从1开始计算&quot;);
    // 算ne[]
    int i ,j ;
        for(i = 2,j = 0 ; i &lt;= p.length() ; i++){
            while(j!=0 &amp;&amp; p1.charAt(i) != p1.charAt(j+1)) j = ne[j];
            if(p1.charAt(i) == p1.charAt(j+1)) j ++;
            ne[i] = j ;

    }
    // 主体
    for(i = 1,j = 0 ; i &lt;= s.length() ; i ++ ){
        while(j != 0 &amp;&amp; s1.charAt(i) != p1.charAt(j+1)) j = ne[j];
        if(s1.charAt(i) == p1.charAt(j+1)) j++;
        if(j == p.length() ){
            res += (&quot;第&quot;+k+&quot;个&quot;+&quot;子串的下标为:&quot;+(i-p1.length()+1)+&quot;\n&quot;);
            j = ne[j];
            k++;
        }
    }

return res;
}





public  String sort(String str) {

    String regex = &quot;[\\s]+&quot;;
    String words[] = str.split(regex);
    String ans=new String();
    int arr[] = new int[words.length];
    for (int i = 0; i &lt; words.length; i++)
        arr[i] = Integer.parseInt(words[i]);//

    int n = arr.length;

    // 构建最大堆
    for (int i = n / 2 - 1; i &gt;= 0; i--)
        heapify(arr, n, i);

    // 逐个提取最大的元素并将其放在数组末尾
    for (int i=n-1; i&gt;=0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        //恢复堆的性质
        heapify(arr, i, 0);

    }
    String words2[] = new String[words.length];

    for (int i = 0; i &lt; words.length; i++){
        words2[i] = String.valueOf(arr[i]);
        ans=ans+&quot; &quot;+words2[i];
    }
    return ans;
}

// 调整堆
static void heapify(int arr[], int n, int i) {
    int largest = i;
    int l = 2*i + 1;
    int r = 2*i + 2;

    // 如果左侧子节点大于父节点
    if (l &lt; n &amp;&amp; arr[l] &gt; arr[largest])
        largest = l;

    // 如果右侧子节点大于父节点
    if (r &lt; n &amp;&amp; arr[r] &gt; arr[largest])
        largest = r;

    // 如果最大元素不是根节点
    if (largest != i) {
        int swap = arr[i];
        arr[i] = arr[largest];
        arr[largest] = swap;

        // 对子树递归执行堆化操作
        heapify(arr, n, largest);
    }



/*public static void main(String[] args) {
    String expression = &quot;(2+3)/3&quot;;
    System.out.println(evaluate(expression));
}*/
}}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[123]]></title>
        <id>https://zhimo37.github.io\/post/123/</id>
        <link href="https://zhimo37.github.io\/post/123/">
        </link>
        <updated>2023-06-23T08:58:16.000Z</updated>
        <content type="html"><![CDATA[<p>123</p>
]]></content>
    </entry>
</feed>